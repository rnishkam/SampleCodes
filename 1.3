Q.) Given 2 strings, write a method to decide if one is a permutaion of the other.

 /* Cases: input1 = abcd, input2 = bcda => True
                  input1 = input2 => True
                  input1 = adbcd, inpput2 = kjdie => False
                  input1 = abcda, input2 = bcad => False

            Algo: if input1 is null OR input2 is null => Exception
                  if (input1 equals input2) => true
                  if input1.length != input2.length => false
                  Hash input1
                  Check hash with input2..if all values = 0..true
            
            Time Complexity: O(n) -> n = number of characters in the string.
        */
        static bool IsPermutation(string input1, string input2)
        {
            if (string.IsNullOrEmpty(input1) || string.IsNullOrEmpty(input2))
                throw new NullReferenceException();
            if (input1 == input2)
                return true;
            if (input1.Length != input2.Length)
                return false;
            var _hash = new Hashtable();
            foreach (var _ch in input1)
            {
                if (_hash[_ch] == null)
                {
                    _hash.Add(_ch, 1);
                }
                else
                {
                    var _cnt = (int)_hash[_ch];
                    _cnt++;
                    _hash[_ch] = _cnt;
                }
            }
            foreach (var _ch in input2)
            {
                if (_hash[_ch] == null)
                    return false;
                var _cnt = (int)_hash[_ch];
                _cnt--;
                _hash[_ch] = _cnt;
            }
            foreach (DictionaryEntry _de in _hash)
            {
                if ((int)_de.Value != 0)
                    return false;
            }
            return true;           
        }
